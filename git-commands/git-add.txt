コマンド名

git-add： ファイルのコンテンツをインデックスに追加

概要

git add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]
        [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]
        [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing] [--renormalize]
        [--chmod=(+|-)x] [--pathspec-from-file=<file> [--pathspec-file-nul]]
        [--] [<pathspec>…]

説明

このコマンドではワークツリー上にある現在のコンテンツを使用してインデックスを更新し、次のコミットのためにステージングされたコンテンツを準備します。
通常、全体として既存のパスの現在のコンテンツを追加しますが、一部のオプションではワークツリーファイルに加えられた変更の一部のみを適用してコンテンツを追加したり、ワークツリーに存在しないパスを削除することもできます。

「インデックス」はワークツリーのコンテンツのスナップショットを保持しており、これは次のコミットのコンテンツとして取得されるスナップショットです。
したがって、ワークツリーに変更を加えた後、コミットコマンドを実行する前、addコマンドを使用し、新しいファイルまたは変更されたファイルをインデックスに追加する必要があります。

このコマンドはコミットする前に複数回実行することができます。addコマンドの実行時、指定されたファイルのコンテンツのみが追加されます。次のコミットに続けて変更を含める場合、git addを再実行し、新しいコンテンツをインデックスに追加する必要があります。

git statusコマンドを使用し、次のコミットのためにステージングされる変更が含まれているファイルを取得することができます。

git addコマンドはデフォルトでは無視されたファイルを追加しません。無視されたファイルがコマンドラインで明示的に指定された場合、git addは無視されたファイルのリストでは機能しません。
Gitによって実行されたディレクトリの再帰またはファイル名のグロブ（シェル前にグロブを引用）によってリーチされた無視されたファイルはそのままになります。git addコマンドは-f（force）オプションを持つ無視されたファイルを追加するのに使用できます。

コミットにコンテンツを追加する他の方法についてはgit-commitを参照してください。

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

オプション
<pathspec>…

コンテンツを追加するファイル。ファイルブロブ（例えば、*.c ）を指定して、一致するすべてのファイルを追加することができます。
またディレクトリ名の先頭（例えば、dir/file1およびdir/file2を追加するdir）を指定して、ディレクトリ全体の現在の状態に一致するようにインデックスを更新できます
（例えば、dirを指定すると、ワークツリーで変更されたファイルであるdir/file1やワークツリーに追加されたファイルであるdir/file2だけでなく、ワークツリーから削除されたファイルdir/file3が記録されます）。
古いバージョンのGitは削除されたファイルを無視するために使用されていることに注意してください。変更されたファイルまたは新しいファイルを追加し、削除されたファイルを無視する場合、--no-allオプションを使用します。

<pathspec>シンタックスの詳細についてはgitglossary[7]のパススペックエントリを参照してください。
-n
--dry-run

実際にファイルを追加するのではなく、ファイルが存在するかどうか、または無視されるかどうかを示します。
-v
--verbose

長々とする（メッセージを増やす）
-f
--force

ファイルの追加を許可し、そうでなければ無視します。
-i
--interactive

ワークツリー上の変更されたコンテンツをインタラクティブにインデックスに追加します。オプションのパス引数を指定し、オペレーションをワークツリーのサブセットに制限することができます。
詳細については「インタラクティブモード」を参照してください。
-p
--patch

インデックスとワークツリーの間でパッチのハンクをインタラクティブに選択し、それらをインデックスに追加します。これにより、ユーザーは変更されたコンテンツをインデックスに追加する前、その違いを確認することができます。
これによりadd --interactiveが効果的に実行されますが、初期コマンドメニューがバイパスされ、patchサブコマンドに直接ジャンプします。詳細については「インタラクティブモード」を参照してください。
-e
--edit

エディターで差分とインデックスを開き、ユーザーが編集できるようにします。エディターを閉じた後、ハンクヘッダーを調整し、パッチをインデックスに適用します。
このオプションの目的としては適用するパッチの行を選択すること、またステージングする行の内容を変更することです。これはインタラクティブなハンクセレクターを使用するよりも迅速かつ柔軟になります。
ただし混乱を招き、インデックスに適用されないパッチを作成してしまう可能性があります。下記のパッチ編集を参照してください。
-u
--update

<pathspec>に一致するエントリがすでにある場所でインデックスを更新します。これにより、ワークツリーに一致するようにインデックスエントリが削除および変更されますが、新しいファイルは追加されません。
-uオプションを使用したときに<pathspec>が指定されていない場合、ワークツリー全体で追跡されたすべてのファイルが更新されます（Gitの古いバージョンは更新を現在のディレクトリとそのサブディレクトリに制限するために使用されます）。
-A
--all
--no-ignore-removal

ワークツリーに<pathspec>に一致するファイルがある場合だけでなく、インデックスにすでにエントリがある場合でも、インデックスを更新します。これにより、ワークツリーに一致するようにインデックスエントリが追加、変更、および削除されます。
-Aオプションを使用した時に<pathspec>が指定されていない場合、ワークツリー全体のすべてのファイルが更新されます（Gitの古いバージョンは更新を現在のディレクトリとそのサブディレクトリに制限するために使用されます）。
--no-all
--ignore-removal

インデックスに不明な新しいファイルとワークツリーで変更されたファイルを追加してインデックスを更新しますが、ワークツリーから削除されたファイルは無視します。<pathspec>が使用されていない場合、このオプションは機能しません。
このオプションは主に「git add <pathspec>…」が「gitadd–no-all <pathspec>…」と同じものを示していた古いバージョンのGitに慣れているユーザーをサポートするためのものです。
-N
--intent-to-add

パスが後で追加されるという事実のみを記録します。パスのエントリはコンテンツなしでインデックスに置かれます。これは、特にファイルのステージングされていないコンテンツをgit diffで表示し、git commit -aでコミットする場合に役立ちます。
--refresh

ファイルを追加せずに、インデックス内のstat（）情報のみを更新します。
--ignore-errors

一部のファイルがインデックス作成エラーが原因で追加できなかった場合、オペレーションを中断せずに他のファイルの追加を続行します。コマンドはゼロ以外のステータスで終了します。
設定変数add.ignoreErrorsをtrueに設定し、これをデフォルトの動作にすることができます。
--ignore-missing

このオプションは-dry-runと同時にのみ使用できます。このオプションを使用することにより、ユーザーは指定されたファイルのいずれかがワークツリーにすでにあるかどうかに関係なく、無視されるかどうかを確認することができます。
--no-warn-embedded-repo

デフォルトではgit submodule addを使用して、.gitmodulesにエントリを作成せずに、組み込みリポジトリをインデックスに追加すると、git addは警告を表示します。
このオプションはその警告を表示させないようにします（例えば、サブモジュールを手動でオペレーション実行している場合）。
--renormalize

追跡したすべてのファイルに「クリーン」プロセスを新たに適用し、それらをインデックスに強制的に再度追加します。
これはcore.autocrlf設定またはtext属性を変更した後、間違ったCRLF / LFラインで追加されたファイルを修正するために役立ちます。このオプションは-uを意味します。
--chmod=(+|-)x

追加されたファイルの実行可能ビットをオーバーライドします。実行可能ビットはインデックスでのみ変更され、ディスク上のファイルは変更されません。
--pathspec-from-file=<file>

パススペックはコマンドライン引数の代わりに<file>でパスされます。<file>が正確に- の場合、標準の入力が使用されます。パススペック要素はLFまたはCR / LFで区切られます。
パススペック要素は設定変数core.quotePathで説明されているように引用できます（git-config[1]を参照）。--pathspec-file-nulおよびグローバル--literal-pathspecsも参照してください。
--pathspec-file-nul

--pathspec-from-fileでのみ機能します。パススペック要素はNUL文字で区切られ、他のすべての文字はそのまま解釈されます（改行と引用符を含む）。
–
このオプションを使用して、コマンドラインオプションをファイルのリストから分離できます（ファイル名がコマンドラインオプションと間違えられる可能性がある場合に便利です）。